<?php
/**
 * EmailValidationResult
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EmailValidationResult model.
 *
 * @package ElasticEmail\Model
 * @author  OpenAPI Generator team
 */
class EmailValidationResult 
{
        /**
     * Local part of an email
     *
     * @var string|null
     * @SerializedName("Account")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $account;

    /**
     * Name of selected domain.
     *
     * @var string|null
     * @SerializedName("Domain")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $domain;

    /**
     * Full email address that was verified
     *
     * @var string|null
     * @SerializedName("Email")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $email;

    /**
     * Suggested spelling if a possible mistake was found
     *
     * @var string|null
     * @SerializedName("SuggestedSpelling")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $suggestedSpelling;

    /**
     * Does the email have a temporary domain
     *
     * @var bool|null
     * @SerializedName("Disposable")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $disposable;

    /**
     * Is an email a role email (e.g. info@, noreply@ etc.)
     *
     * @var bool|null
     * @SerializedName("Role")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $role;

    /**
     * All detected issues
     *
     * @var string|null
     * @SerializedName("Reason")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $reason;

    /**
     * Date of creation in YYYY-MM-DDThh:ii:ss format
     *
     * @var \DateTime|null
     * @SerializedName("DateAdded")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $dateAdded;

    /**
     * @var ElasticEmail\Model\EmailValidationStatus|null
     * @SerializedName("Result")
     * @Assert\Type("ElasticEmail\Model\EmailValidationStatus")
     * @Type("ElasticEmail\Model\EmailValidationStatus")
     */
    protected $result;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->account = isset($data['account']) ? $data['account'] : null;
        $this->domain = isset($data['domain']) ? $data['domain'] : null;
        $this->email = isset($data['email']) ? $data['email'] : null;
        $this->suggestedSpelling = isset($data['suggestedSpelling']) ? $data['suggestedSpelling'] : null;
        $this->disposable = isset($data['disposable']) ? $data['disposable'] : null;
        $this->role = isset($data['role']) ? $data['role'] : null;
        $this->reason = isset($data['reason']) ? $data['reason'] : null;
        $this->dateAdded = isset($data['dateAdded']) ? $data['dateAdded'] : null;
        $this->result = isset($data['result']) ? $data['result'] : null;
    }

    /**
     * Gets account.
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->account;
    }

    /**
     * Sets account.
     *
     * @param string|null $account  Local part of an email
     *
     * @return $this
     */
    public function setAccount($account = null)
    {
        $this->account = $account;

        return $this;
    }

    /**
     * Gets domain.
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * Sets domain.
     *
     * @param string|null $domain  Name of selected domain.
     *
     * @return $this
     */
    public function setDomain($domain = null)
    {
        $this->domain = $domain;

        return $this;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Sets email.
     *
     * @param string|null $email  Full email address that was verified
     *
     * @return $this
     */
    public function setEmail($email = null)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Gets suggestedSpelling.
     *
     * @return string|null
     */
    public function getSuggestedSpelling()
    {
        return $this->suggestedSpelling;
    }

    /**
     * Sets suggestedSpelling.
     *
     * @param string|null $suggestedSpelling  Suggested spelling if a possible mistake was found
     *
     * @return $this
     */
    public function setSuggestedSpelling($suggestedSpelling = null)
    {
        $this->suggestedSpelling = $suggestedSpelling;

        return $this;
    }

    /**
     * Gets disposable.
     *
     * @return bool|null
     */
    public function isDisposable()
    {
        return $this->disposable;
    }

    /**
     * Sets disposable.
     *
     * @param bool|null $disposable  Does the email have a temporary domain
     *
     * @return $this
     */
    public function setDisposable($disposable = null)
    {
        $this->disposable = $disposable;

        return $this;
    }

    /**
     * Gets role.
     *
     * @return bool|null
     */
    public function isRole()
    {
        return $this->role;
    }

    /**
     * Sets role.
     *
     * @param bool|null $role  Is an email a role email (e.g. info@, noreply@ etc.)
     *
     * @return $this
     */
    public function setRole($role = null)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Gets reason.
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->reason;
    }

    /**
     * Sets reason.
     *
     * @param string|null $reason  All detected issues
     *
     * @return $this
     */
    public function setReason($reason = null)
    {
        $this->reason = $reason;

        return $this;
    }

    /**
     * Gets dateAdded.
     *
     * @return \DateTime|null
     */
    public function getDateAdded(): ?\DateTime
    {
        return $this->dateAdded;
    }

    /**
     * Sets dateAdded.
     *
     * @param \DateTime|null $dateAdded  Date of creation in YYYY-MM-DDThh:ii:ss format
     *
     * @return $this
     */
    public function setDateAdded(\DateTime $dateAdded = null)
    {
        $this->dateAdded = $dateAdded;

        return $this;
    }

    /**
     * Gets result.
     *
     * @return ElasticEmail\Model\EmailValidationStatus|null
     */
    public function getResult(): ?EmailValidationStatus
    {
        return $this->result;
    }

    /**
     * Sets result.
     *
     * @param ElasticEmail\Model\EmailValidationStatus|null $result
     *
     * @return $this
     */
    public function setResult(EmailValidationStatus $result = null)
    {
        $this->result = $result;

        return $this;
    }
}


