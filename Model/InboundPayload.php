<?php
/**
 * InboundPayload
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the InboundPayload model.
 *
 * @package ElasticEmail\Model
 * @author  OpenAPI Generator team
 */
class InboundPayload 
{
        /**
     * Filter of the inbound data
     *
     * @var string
     * @SerializedName("Filter")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $filter;

    /**
     * Name of this route
     *
     * @var string
     * @SerializedName("Name")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * @var ElasticEmail\Model\InboundRouteFilterType
     * @SerializedName("FilterType")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("ElasticEmail\Model\InboundRouteFilterType")
     * @Type("ElasticEmail\Model\InboundRouteFilterType")
     */
    protected $filterType;

    /**
     * @var ElasticEmail\Model\InboundRouteActionType
     * @SerializedName("ActionType")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("ElasticEmail\Model\InboundRouteActionType")
     * @Type("ElasticEmail\Model\InboundRouteActionType")
     */
    protected $actionType;

    /**
     * Email to forward the inbound to
     *
     * @var string|null
     * @SerializedName("EmailAddress")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $emailAddress;

    /**
     * Address to notify about the inbound
     *
     * @var string|null
     * @SerializedName("HttpAddress")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $httpAddress;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->filter = isset($data['filter']) ? $data['filter'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->filterType = isset($data['filterType']) ? $data['filterType'] : null;
        $this->actionType = isset($data['actionType']) ? $data['actionType'] : null;
        $this->emailAddress = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->httpAddress = isset($data['httpAddress']) ? $data['httpAddress'] : null;
    }

    /**
     * Gets filter.
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Sets filter.
     *
     * @param string $filter  Filter of the inbound data
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->filter = $filter;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string $name  Name of this route
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets filterType.
     *
     * @return ElasticEmail\Model\InboundRouteFilterType
     */
    public function getFilterType(): InboundRouteFilterType
    {
        return $this->filterType;
    }

    /**
     * Sets filterType.
     *
     * @param ElasticEmail\Model\InboundRouteFilterType $filterType
     *
     * @return $this
     */
    public function setFilterType(InboundRouteFilterType $filterType)
    {
        $this->filterType = $filterType;

        return $this;
    }

    /**
     * Gets actionType.
     *
     * @return ElasticEmail\Model\InboundRouteActionType
     */
    public function getActionType(): InboundRouteActionType
    {
        return $this->actionType;
    }

    /**
     * Sets actionType.
     *
     * @param ElasticEmail\Model\InboundRouteActionType $actionType
     *
     * @return $this
     */
    public function setActionType(InboundRouteActionType $actionType)
    {
        $this->actionType = $actionType;

        return $this;
    }

    /**
     * Gets emailAddress.
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->emailAddress;
    }

    /**
     * Sets emailAddress.
     *
     * @param string|null $emailAddress  Email to forward the inbound to
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress = null)
    {
        $this->emailAddress = $emailAddress;

        return $this;
    }

    /**
     * Gets httpAddress.
     *
     * @return string|null
     */
    public function getHttpAddress()
    {
        return $this->httpAddress;
    }

    /**
     * Sets httpAddress.
     *
     * @param string|null $httpAddress  Address to notify about the inbound
     *
     * @return $this
     */
    public function setHttpAddress($httpAddress = null)
    {
        $this->httpAddress = $httpAddress;

        return $this;
    }
}


