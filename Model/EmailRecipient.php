<?php
/**
 * EmailRecipient
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EmailRecipient model.
 *
 * List of recipients (visible to others)
 *
 * @package ElasticEmail\Model
 * @author  OpenAPI Generator team
 */
class EmailRecipient 
{
        /**
     * Proper email address.
     *
     * @var string|null
     * @SerializedName("Email")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $email;

    /**
     * A key-value collection of merge fields which can be used in e-mail body.
     *
     * @var string[]|null
     * @SerializedName("Fields")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string, string>")
     */
    protected $fields;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->email = isset($data['email']) ? $data['email'] : null;
        $this->fields = isset($data['fields']) ? $data['fields'] : null;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Sets email.
     *
     * @param string|null $email  Proper email address.
     *
     * @return $this
     */
    public function setEmail($email = null)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Gets fields.
     *
     * @return string[]|null
     */
    public function getFields(): ?array
    {
        return $this->fields;
    }

    /**
     * Sets fields.
     *
     * @param string[]|null $fields  A key-value collection of merge fields which can be used in e-mail body.
     *
     * @return $this
     */
    public function setFields(array $fields = null)
    {
        $this->fields = $fields;

        return $this;
    }
}


