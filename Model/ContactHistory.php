<?php
/**
 * ContactHistory
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ContactHistory model.
 *
 * @package ElasticEmail\Model
 * @author  OpenAPI Generator team
 */
class ContactHistory 
{
        /**
     * Type of event occured on this Contact.
     *
     * @var ContactHistEventType|null
     * @SerializedName("EventType")
     * @Assert\Type("ContactHistEventType")
     * @Type("ContactHistEventType")
     */
    protected $eventType;

    /**
     * Formatted date of event.
     *
     * @var \DateTime|null
     * @SerializedName("EventDate")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $eventDate;

    /**
     * Name of channel this event occured on
     *
     * @var string|null
     * @SerializedName("ChannelName")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $channelName;

    /**
     * Name of template this event occured on
     *
     * @var string|null
     * @SerializedName("TemplateName")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $templateName;

    /**
     * IP Address of the event.
     *
     * @var string|null
     * @SerializedName("IPAddress")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $iPAddress;

    /**
     * Country of the event.
     *
     * @var string|null
     * @SerializedName("Country")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $country;

    /**
     * Additional information about the event
     *
     * @var string|null
     * @SerializedName("Data")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $data;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->eventType = isset($data['eventType']) ? $data['eventType'] : null;
        $this->eventDate = isset($data['eventDate']) ? $data['eventDate'] : null;
        $this->channelName = isset($data['channelName']) ? $data['channelName'] : null;
        $this->templateName = isset($data['templateName']) ? $data['templateName'] : null;
        $this->iPAddress = isset($data['iPAddress']) ? $data['iPAddress'] : null;
        $this->country = isset($data['country']) ? $data['country'] : null;
        $this->data = isset($data['data']) ? $data['data'] : null;
    }

    /**
     * Gets eventType.
     *
     * @return ContactHistEventType|null
     */
    public function getEventType()
    {
        return $this->eventType;
    }

    /**
     * Sets eventType.
     *
     * @param ContactHistEventType|null $eventType  Type of event occured on this Contact.
     *
     * @return $this
     */
    public function setEventType($eventType = null)
    {
        $this->eventType = $eventType;

        return $this;
    }

    /**
     * Gets eventDate.
     *
     * @return \DateTime|null
     */
    public function getEventDate(): ?\DateTime
    {
        return $this->eventDate;
    }

    /**
     * Sets eventDate.
     *
     * @param \DateTime|null $eventDate  Formatted date of event.
     *
     * @return $this
     */
    public function setEventDate(\DateTime $eventDate = null)
    {
        $this->eventDate = $eventDate;

        return $this;
    }

    /**
     * Gets channelName.
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->channelName;
    }

    /**
     * Sets channelName.
     *
     * @param string|null $channelName  Name of channel this event occured on
     *
     * @return $this
     */
    public function setChannelName($channelName = null)
    {
        $this->channelName = $channelName;

        return $this;
    }

    /**
     * Gets templateName.
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->templateName;
    }

    /**
     * Sets templateName.
     *
     * @param string|null $templateName  Name of template this event occured on
     *
     * @return $this
     */
    public function setTemplateName($templateName = null)
    {
        $this->templateName = $templateName;

        return $this;
    }

    /**
     * Gets iPAddress.
     *
     * @return string|null
     */
    public function getIPAddress()
    {
        return $this->iPAddress;
    }

    /**
     * Sets iPAddress.
     *
     * @param string|null $iPAddress  IP Address of the event.
     *
     * @return $this
     */
    public function setIPAddress($iPAddress = null)
    {
        $this->iPAddress = $iPAddress;

        return $this;
    }

    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Sets country.
     *
     * @param string|null $country  Country of the event.
     *
     * @return $this
     */
    public function setCountry($country = null)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Gets data.
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Sets data.
     *
     * @param string|null $data  Additional information about the event
     *
     * @return $this
     */
    public function setData($data = null)
    {
        $this->data = $data;

        return $this;
    }
}


