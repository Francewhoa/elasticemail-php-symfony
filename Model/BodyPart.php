<?php
/**
 * BodyPart
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BodyPart model.
 *
 * Email body part with user-provided MIME type (text/html, text/plain, etc)
 *
 * @package ElasticEmail\Model
 * @author  OpenAPI Generator team
 */
class BodyPart 
{
        /**
     * @var ElasticEmail\Model\BodyContentType
     * @SerializedName("ContentType")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("ElasticEmail\Model\BodyContentType")
     * @Type("ElasticEmail\Model\BodyContentType")
     */
    protected $contentType;

    /**
     * Actual content of the body part
     *
     * @var string|null
     * @SerializedName("Content")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $content;

    /**
     * Text value of charset encoding for example: iso-8859-1, windows-1251, utf-8, us-ascii, windows-1250 and more…
     *
     * @var string|null
     * @SerializedName("Charset")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $charset;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->contentType = isset($data['contentType']) ? $data['contentType'] : null;
        $this->content = isset($data['content']) ? $data['content'] : null;
        $this->charset = isset($data['charset']) ? $data['charset'] : null;
    }

    /**
     * Gets contentType.
     *
     * @return ElasticEmail\Model\BodyContentType
     */
    public function getContentType(): BodyContentType
    {
        return $this->contentType;
    }

    /**
     * Sets contentType.
     *
     * @param ElasticEmail\Model\BodyContentType $contentType
     *
     * @return $this
     */
    public function setContentType(BodyContentType $contentType)
    {
        $this->contentType = $contentType;

        return $this;
    }

    /**
     * Gets content.
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Sets content.
     *
     * @param string|null $content  Actual content of the body part
     *
     * @return $this
     */
    public function setContent($content = null)
    {
        $this->content = $content;

        return $this;
    }

    /**
     * Gets charset.
     *
     * @return string|null
     */
    public function getCharset()
    {
        return $this->charset;
    }

    /**
     * Sets charset.
     *
     * @param string|null $charset  Text value of charset encoding for example: iso-8859-1, windows-1251, utf-8, us-ascii, windows-1250 and more…
     *
     * @return $this
     */
    public function setCharset($charset = null)
    {
        $this->charset = $charset;

        return $this;
    }
}


