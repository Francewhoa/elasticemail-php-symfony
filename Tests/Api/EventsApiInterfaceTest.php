<?php
/**
 * EventsApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace ElasticEmail\Tests\Api;

use ElasticEmail\Configuration;
use ElasticEmail\ApiClient;
use ElasticEmail\ApiException;
use ElasticEmail\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * EventsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  ElasticEmail\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class EventsApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for eventsByTransactionidGet
     *
     * Load Email Events.
     *
     */
    public function testEventsByTransactionidGet()
    {
        $client = static::createClient();

        $path = '/events/{transactionid}';
        $pattern = '{transactionid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for eventsChannelsByNameExportPost
     *
     * Export Channel Events.
     *
     */
    public function testEventsChannelsByNameExportPost()
    {
        $client = static::createClient();

        $path = '/events/channels/{name}/export';
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for eventsChannelsByNameGet
     *
     * Load Channel Events.
     *
     */
    public function testEventsChannelsByNameGet()
    {
        $client = static::createClient();

        $path = '/events/channels/{name}';
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for eventsChannelsExportByIdStatusGet
     *
     * Check Channel Export Status.
     *
     */
    public function testEventsChannelsExportByIdStatusGet()
    {
        $client = static::createClient();

        $path = '/events/channels/export/{id}/status';
        $pattern = '{id}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for eventsExportByIdStatusGet
     *
     * Check Export Status.
     *
     */
    public function testEventsExportByIdStatusGet()
    {
        $client = static::createClient();

        $path = '/events/export/{id}/status';
        $pattern = '{id}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for eventsExportPost
     *
     * Export Events.
     *
     */
    public function testEventsExportPost()
    {
        $client = static::createClient();

        $path = '/events/export';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for eventsGet
     *
     * Load Events.
     *
     */
    public function testEventsGet()
    {
        $client = static::createClient();

        $path = '/events';

        $crawler = $client->request('GET', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
