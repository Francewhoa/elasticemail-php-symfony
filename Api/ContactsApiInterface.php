<?php
/**
 * ContactsApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace ElasticEmail\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use ElasticEmail\Model\CompressionFormat;
use ElasticEmail\Model\Contact;
use ElasticEmail\Model\ContactHistory;
use ElasticEmail\Model\ContactPayload;
use ElasticEmail\Model\ContactUpdatePayload;
use ElasticEmail\Model\EmailsPayload;
use ElasticEmail\Model\ExportFileFormats;
use ElasticEmail\Model\ExportLink;
use ElasticEmail\Model\ExportStatus;

/**
 * ContactsApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  ElasticEmail\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface ContactsApiInterface
{

    /**
     * Sets authentication method apikey
     *
     * @param string $value Value of the apikey authentication method.
     *
     * @return void
     */
    public function setapikey($value);

    /**
     * Operation contactsByEmailDelete
     *
     * Delete Contact
     *
     * @param  string $email  Proper email address. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function contactsByEmailDelete($email, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsByEmailGet
     *
     * Load Contact
     *
     * @param  string $email  Proper email address. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\Contact
     *
     */
    public function contactsByEmailGet($email, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsByEmailHistoryGet
     *
     * Load History
     *
     * @param  string $email  Proper email address. (required)
     * @param  int $limit  Maximum number of returned items. (optional)
     * @param  int $offset  How many items should be returned ahead. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\ContactHistory[]
     *
     */
    public function contactsByEmailHistoryGet($email, $limit = null, $offset = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsByEmailPut
     *
     * Update Contact
     *
     * @param  string $email  Proper email address. (required)
     * @param  ElasticEmail\Model\ContactUpdatePayload $contactUpdatePayload   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\Contact
     *
     */
    public function contactsByEmailPut($email, ContactUpdatePayload $contactUpdatePayload, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsDeletePost
     *
     * Delete Contacts Bulk
     *
     * @param  ElasticEmail\Model\EmailsPayload $emailsPayload  Provide either rule or a list of emails, not both. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function contactsDeletePost(EmailsPayload $emailsPayload, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsExportByIdStatusGet
     *
     * Check Export Status
     *
     * @param  string $id  ID of the exported file (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\ExportStatus
     *
     */
    public function contactsExportByIdStatusGet($id, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsExportPost
     *
     * Export Contacts
     *
     * @param  ExportFileFormats $fileFormat  Format of the exported file (optional)
     * @param  string $rule  Query used for filtering. (optional)
     * @param  string[] $emails  Comma delimited list of contact emails (optional)
     * @param  CompressionFormat $compressionFormat  FileResponse compression format. None or Zip. (optional)
     * @param  string $fileName  Name of your file including extension. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\ExportLink
     *
     */
    public function contactsExportPost($fileFormat = null, $rule = null, array $emails = null, $compressionFormat = null, $fileName = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsGet
     *
     * Load Contacts
     *
     * @param  int $limit  Maximum number of returned items. (optional)
     * @param  int $offset  How many items should be returned ahead. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\Contact[]
     *
     */
    public function contactsGet($limit = null, $offset = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsImportPost
     *
     * Upload Contacts
     *
     * @param  string $listName  Name of an existing list to add these contacts to (optional)
     * @param  string $encodingName  In what encoding the file is uploaded (optional)
     * @param  UploadedFile $file   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function contactsImportPost($listName = null, $encodingName = null, UploadedFile $file = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation contactsPost
     *
     * Add Contact
     *
     * @param  ElasticEmail\Model\ContactPayload[] $contactPayload   (required)
     * @param  string[] $listnames  Names of lists to which the uploaded contacts should be added to (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ElasticEmail\Model\Contact[]
     *
     */
    public function contactsPost(array $contactPayload, array $listnames = null, &$responseCode, array &$responseHeaders);
}
